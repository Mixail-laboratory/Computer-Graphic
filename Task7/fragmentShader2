#version 460
in highp vec4 pos;
in highp vec4 norm;

uniform highp vec3 cameraPos;
uniform lowp vec3 colUnif;

uniform highp vec3 lightPos;
uniform lowp vec3 lightCol;

uniform highp vec3 directedDir;
uniform lowp vec3 directedCol;

uniform lowp vec3 projectorCol;
uniform highp vec3 projectorDir;
uniform highp vec3 projectorPos;
uniform highp float innerAngle;
uniform highp float outerAngle;

out lowp vec4 diffuseColor;


void main() {
    vec3 n = norm.xyz;
    vec3 v = normalize(cameraPos - pos.xyz);

    vec3 l_point = normalize(lightPos - pos.xyz);
    vec3 h_point = 2 * dot(l_point, n.xyz)*n.xyz - l_point;

    vec3 diffuse_point = lightCol * max(0, dot(l_point, n.xyz)) / (pow(distance(lightPos, pos.xyz), 2) + 1);
    vec3 specular_point = lightCol * pow(max(0, dot(v, h_point)), 50) / (pow(distance(lightPos, pos.xyz), 2) + 1);

    vec3 dir_diffuse = vec3(0.0, 0.0, 0.0);
    vec3 dir_specular = vec3(0.0, 0.0, 0.0);
    if (length(directedDir) > 1e-5)
    {
        vec3 l = normalize(-directedDir);
        vec3 h = 2 * dot(l, n.xyz)*n.xyz - l;

        dir_diffuse = directedCol * max(0, dot(l, n.xyz));
        dir_specular =  directedCol * pow(max(0, dot(v, h)), 50);
    }

    vec3 proj_diffuse = vec3(0.0, 0.0, 0.0);
    vec3 proj_specular = vec3(0.0, 0.0, 0.0);
    if (length(projectorDir) > 1e-5)
    {
        vec3 l = normalize(projectorPos - pos.xyz);
        vec3 dir = normalize(projectorDir);
        vec3 h = 2 * dot(l, n.xyz)*n.xyz - l;

        float angle = acos(-dot(dir, l)) * 180/3.14;
        if (angle < outerAngle)
        {
            proj_diffuse = projectorCol * max(0, dot(l, n.xyz)) / (pow(distance(projectorPos, pos.xyz), 2) + 1);
            proj_specular = projectorCol * pow(max(0, dot(v, h)), 50) / (pow(distance(projectorPos, pos.xyz), 2) + 1);

            if (angle > innerAngle)
            {
                proj_diffuse = proj_diffuse * (outerAngle - angle) / (outerAngle - innerAngle);
                proj_specular = proj_specular * (outerAngle - angle) / (outerAngle - innerAngle);
            }
        }
    }

    vec3 temp_col = 0.5 * colUnif + 4*(diffuse_point + 0.5*specular_point) + 0.8*(dir_diffuse + dir_specular) + 4 * (proj_diffuse + 0.5*proj_specular);

    diffuseColor = vec4(temp_col, 1.0);
}
